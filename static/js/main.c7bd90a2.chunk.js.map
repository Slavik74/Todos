{"version":3,"sources":["model/todoModel.js","utils.js","components/NewTask/NewTask.js","components/TaskCard/TaskCard.js","components/TasksStatus/TasksStatus.js","components/Tasks/Tasks.js","App.js","reportWebVitals.js","index.js"],"names":["TodoModel","name","this","id","replace","c","r","Math","random","toString","complete","NewTask","handleNewTask","useState","wrongInput","setWrongInput","className","type","placeholder","onKeyDown","event","key","target","value","length","Alert","variant","TaskCard","task","handleDeleteTask","handleChangeStatus","checked","setChecked","useEffect","FormCheck","defaultChecked","onChange","label","icon","faWhatsapp","onClick","message","shareTextToWhatsApp","window","confirm","TasksStatus","tasksList","showAll","showCompleted","showOpen","reduce","total","Button","Tasks","JSON","parse","localStorage","getItem","todosList","setTodosList","filter","setFilter","setItem","stringify","filteredList","todos","Container","concat","TasksList","map","index","showTasks","taskId","slice","array","findIndex","obj","splice","status","x","App","Row","Col","md","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7bd90a2.chunk.js","sourcesContent":["import uuidv4 from '../utils.js'\r\nexport default class TodoModel {\r\n    constructor(name) {\r\n        this.id = uuidv4();\r\n        this.name = name;\r\n        this.complete = false;\r\n    }\r\n}","export default function uuidv4() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n      var r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\r\n      return v.toString(16);\r\n    });\r\n  }","import React, { useState } from 'react'\r\nimport { Alert } from 'react-bootstrap';\r\nimport TodoModel from '../../model/todoModel';\r\nimport './NewTask.css'\r\n\r\nexport default function NewTask({handleNewTask}) {\r\n\r\n    const [wrongInput, setWrongInput] = useState(false)\r\n    const handleKeyDown = (event) => {\r\n        setWrongInput(false)\r\n        if (event.key === 'Enter') {\r\n            if (event.target.value.length>1)\r\n            {\r\n                handleNewTask(new TodoModel(event.target.value))\r\n                event.target.value=\"\"\r\n            }\r\n            else\r\n                setWrongInput(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"new-task\">\r\n            <input type=\"text\"className=\"new-task-input\" placeholder=\"What's next?\" onKeyDown={handleKeyDown} />\r\n            {\r\n                wrongInput?\r\n                <Alert variant=\"danger\">Your task is too short. try at least 2 characters</Alert>:null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport './TaskCard.css';\r\nimport {FormCheck } from 'react-bootstrap';\r\nimport { shareTextToWhatsApp } from 'share-text-to-whatsapp';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWhatsapp } from '@fortawesome/free-brands-svg-icons';\r\n\r\nexport default function TaskCard({task, handleDeleteTask, handleChangeStatus}) {\r\n\r\n    const [checked, setChecked] = useState(task.complete)\r\n\r\n    useEffect(() => {\r\n        setChecked(task.complete)\r\n    }, [task.complete])\r\n\r\n    const handleCheck= ()=>{\r\n        handleChangeStatus(task, !checked)        \r\n        setChecked(!checked);\r\n    }\r\n\r\n    const confirmDelete = () => {\r\n        if (window.confirm('Are you sure you want to delete this task?')) {\r\n            handleDeleteTask(task.id)\r\n        }\r\n    }\r\n\r\n\r\n    function  shareTaskToWhatsApp(message){\r\n        shareTextToWhatsApp(\"You have new task: \" + message); // This will open up WhatsApp and you will be shown a list of contacts you can send your message to.\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"task\">\r\n                <FormCheck defaultChecked={checked} onChange={handleCheck} label={task.name} />\r\n            </div>\r\n            \r\n\r\n            <div className=\"task__icons\">\r\n                <FontAwesomeIcon className=\"whatsapp-icon\" icon={faWhatsapp}  onClick={()=>shareTaskToWhatsApp(task.name)}/>\r\n                <span className=\"task__remove-icon\" onClick={confirmDelete}>x</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport './TasksStatus.css'\r\n\r\nfunction TasksStatus({tasksList, showAll, showCompleted, showOpen}) {\r\n\r\n    return (\r\n        <div className=\"c-tasks-status\">\r\n            <label>{tasksList.reduce((total, task) => !task.complete + total,0) + ' items left'}</label>\r\n            <div className=\"buttons-box\">\r\n                <Button variant=\"dark\" onClick={()=>showAll()}>All</Button>&nbsp;\r\n                <Button variant=\"dark\" onClick={()=>showOpen()}>Active</Button>&nbsp;\r\n                <Button variant=\"dark\" onClick={()=>showCompleted()}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TasksStatus\r\n","import React, {useEffect, useState} from 'react'\r\nimport {Alert, Container} from 'react-bootstrap';\r\nimport NewTask from '../NewTask/NewTask';\r\nimport TaskCard from './../TaskCard/TaskCard';\r\nimport './Tasks.css'\r\nimport TasksStatus from './../TasksStatus/TasksStatus';\r\n\r\nexport default function Tasks() {\r\n\r\n\r\n    const [todosList, setTodosList] = useState(JSON.parse(localStorage.getItem(\"todos\") || \"[]\"))\r\n    const [filter, setFilter] = useState(0)\r\n\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(todosList));\r\n    }, [todosList])\r\n\r\n    const handleNewTask = (task)=>{\r\n        setTodosList(todosList.concat([task]))    \r\n    }\r\n  \r\n    const handleDeleteTask = (taskId) => {\r\n        setTodosList(todosList.slice())\r\n        var array = [...todosList]; // make a separate copy of the array\r\n        const index = array.findIndex(obj => obj.id === taskId);\r\n        if (index !== -1) {\r\n            array.splice(index, 1);\r\n            setTodosList(array);\r\n        }\r\n    }\r\n\r\n    const showCompleted = () => {\r\n        setFilter(1)\r\n    }\r\n\r\n    const showAll = () => {\r\n        setFilter(0)\r\n    }\r\n\r\n    const showOpen = () => {\r\n        setFilter(2)\r\n    }\r\n  \r\n    const handleChangeStatus = (task, status) => {\r\n\r\n        var array = [...todosList];\r\n        const index = array.findIndex(x => x.id ===task.id);\r\n        if (index !== -1) {\r\n            array[index].complete = status;\r\n            setTodosList(array);\r\n        }\r\n\r\n    }\r\n\r\n    let filteredList = todosList  //All  tasks\r\n    let todos = filteredList.length > 0;\r\n    if(filter===1) //Completed tasks\r\n        filteredList = todosList.filter(task => task.complete)\r\n    else if(filter===2){ //Open tasks\r\n        filteredList = todosList.filter(task => !task.complete)\r\n        todos = filteredList.length > 0;\r\n    }\r\n\r\n    function showTasks(TasksList, handleDeleteTask, handleChangeStatus, todos){\r\n        if (todos){\r\n            return(\r\n                TasksList.map((task, index) =>\r\n                    <div key={index} className=\"list-group-item border-0\">\r\n                        <TaskCard key={task.id} task={task} \r\n                                    handleDeleteTask={handleDeleteTask} \r\n                                    handleChangeStatus={handleChangeStatus} />\r\n                    </div>\r\n                )\r\n            )\r\n        } else {\r\n            return (\r\n                <Alert variant=\"success\">\r\n                    No active tasks\r\n                </Alert>\r\n            )\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n            <Container className=\"c-tasks\">\r\n                <header>\r\n                    <h1>Todos</h1>\r\n                    <NewTask handleNewTask={handleNewTask} />\r\n                </header>\r\n                <Container className=\"tasks-box\">\r\n                {   \r\n                    showTasks(filteredList,handleDeleteTask, handleChangeStatus, todos)\r\n                }                                       \r\n                </Container>\r\n                <footer>\r\n                    <TasksStatus tasksList={todosList} showAll={showAll} showCompleted={showCompleted} showOpen={showOpen} />\r\n                </footer>\r\n\r\n            </Container>\r\n\r\n    )\r\n}\r\n","import './App.css';\nimport Tasks from './components/Tasks/Tasks';\nimport { Col, Row, Container } from 'react-bootstrap';\n\nfunction App() {\n  return (\n    <Container className=\"App\">\n      <Row>\n        <Col md={6}>\n            <Tasks />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}